
import ConfigParser
from flask import Flask, redirect, url_for, render_template, session
from config import Config
from forms import Forms
app = Flask(__name__)


SESSION_TYPE = 'redis'
app.config.from_object(__name__)


# SESSION SET/GET
@app.route('/set/')
def set():
	session['key'] = 'value'
	return 'ok'

@app.route('/get/')
def get():
	return session.get('key', 'not set')


#ROOT
@app.route('/')
def index():
	return render_template('./home.html')

@app.route('/config/')
def config():
	s = []
	s.append('debug:'+app.config['DEBUG'])
	s.append('port:'+app.config['port'])
	s.append('url:'+app.config['url'])
	s.append('ip_address:'+app.config['ip_address'])
	return ', '.join(s)

def init(app):
	config = ConfigParser.ConfigParser()
	try:
		config_location = "etc/defaults.cfg"
		config.read(config_location)
		app.config['DEBUG'] = config.get("config", "debug")
		app.config['ip_address'] = config.get("config", "ip_address")
		app.config['port'] = config.get("config", "port")
		app.config['url'] = config.get("config", "url")
	except:
		print "could not read configs from: ", config_location


#ROUTES
@app.route("/general/")
def general():
	return "Gneral forum pa"

#ROUTES FOR LOGIN/LOGOUT
@app.route("/login")
def login():
	return "LOGIN ROUTE"
@app.route("/register")
def register():
	return "REGISTER ROUTE"

#PRIVATE ROUTS
@app.route("/membersarea")
def membersarea():
	# TEST FOR USER LOGIN
	#
	# IF USER NOT LOGGED IN REDIRECT TO LOGIN PAGE
	return redirect(url_for('login'))

#ERROR HANDLING
@app.errorhandler(404)
def page_not_found(error):
	return "THAT PAGE DOESN'T EXIST YOU WEAPON", 404
#TEST(replace '404' with error code required)
def forceerror():
	abort(404)

if __name__ == "__main__":
	init(app)
	app.run(host.config['ip_address'], port=int(app.config['port']), debug=True)
